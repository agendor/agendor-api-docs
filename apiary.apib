FORMAT: 1A
HOST: https://api.agendor.com.br/v1

# Agendor API V1
The Agendor API provides a representation of the data found in your account at [Agendor](http://agendor.com.br).
We follow the **RESTful** principles, so the API is stateless and http methods and response codes are used whenever possible.

The url for the requests is: `https://api.agendor.com.br/v1`

## Versioning

**To keep updated with any changes in this API and new versions release, subscribe to our list.**
<div>
<form action="http://agendor.us2.list-manage.com/subscribe/post?u=015f991ccd59d308e2a3b32bf&amp;id=511b58282d" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
<div class="mc-field-group">
<input type="email" value="" placeholder="Enter your email" name="EMAIL" style="-webkit-appearance: none; -webkit-box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px 0px inset; -webkit-rtl-ordering: logical; -webkit-transition-delay: 0s, 0s; -webkit-transition-duration: 0.15s, 0.15s; -webkit-transition-property: border-color, box-shadow; -webkit-transition-timing-function: ease-in-out, ease-in-out; -webkit-user-select: text; -webkit-writing-mode: horizontal-tb; background-color: rgb(255, 255, 255); background-image: none; border-bottom-color: rgb(204, 204, 204); border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-bottom-style: solid; border-bottom-width: 1px; border-image-outset: 0px; border-image-repeat: stretch; border-image-slice: 100%; border-image-source: none; border-image-width: 1; border-left-color: rgb(204, 204, 204); border-left-style: solid; border-left-width: 1px; border-right-color: rgb(204, 204, 204); border-right-style: solid; border-right-width: 1px; border-top-color: rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-top-style: solid; border-top-width: 1px; box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px 0px inset; box-sizing: border-box; color: rgb(85, 85, 85); cursor: auto; display: inline; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; height: 34px; letter-spacing: normal; line-height: 20px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; margin-top: 0px; padding-bottom: 6px; padding-left: 12px; padding-right: 12px; padding-top: 6px; text-align: start; text-indent: 0px; text-shadow: none; text-transform: none; transition-delay: 0s, 0s; transition-duration: 0.15s, 0.15s; transition-property: border-color, box-shadow; transition-timing-function: ease-in-out, ease-in-out; width: 400px; word-spacing: 0px; writing-mode: lr-tb;" id="mce-EMAIL"/>
<input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" style="-webkit-appearance: none; -webkit-user-select: none; -webkit-writing-mode: horizontal-tb; align-items: flex-start; background-color: rgb(92, 184, 92); background-image: none; border-bottom-color: rgb(76, 174, 76); border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-bottom-style: solid; border-bottom-width: 1px; border-image-outset: 0px; border-image-repeat: stretch; border-image-slice: 100%; border-image-source: none; border-image-width: 1; border-left-color: rgb(76, 174, 76); border-left-style: solid; border-left-width: 1px; border-right-color: rgb(76, 174, 76); border-right-style: solid; border-right-width: 1px; border-top-color: rgb(76, 174, 76); border-top-left-radius: 4px; border-top-right-radius: 4px; border-top-style: solid; border-top-width: 1px; box-sizing: border-box; color: rgb(255, 255, 255); cursor: pointer; display: inline-block; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; height: 34px; letter-spacing: normal; line-height: 20px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; overflow-x: visible; overflow-y: visible; padding-bottom: 6px; padding-left: 12px; padding-right: 12px; padding-top: 6px; text-align: center; text-indent: 0px; text-shadow: none; text-transform: none; vertical-align: center; white-space: nowrap; width: 100px; word-spacing: 0px; writing-mode: lr-tb;"/>
</div>
<div id="mce-responses" class="clear">
<div class="response" id="mce-error-response" style="display:none"></div>
<div class="response" id="mce-success-response" style="display:none"></div> 
</div>
<div style="position: absolute; left: -5000px;"><input type="text" name="b_015f991ccd59d308e2a3b32bf_511b58282d" value=""></div>
</form>
</div>

## Authentication

You can choose one of the following ways to authenticate and have access to the API resources. We recommend using the Token method.

### Username and password

[HTTP Basic Authentication](https://tools.ietf.org/html/rfc2617#section-2). It's done by sending an `Authorization` header with the text `Basic` followed by a base64 encoded string of `email:password`.

Example:

    curl "https://api.agendor.com.br/v1/organizations?page=1&pretty=true" \
        -H "Authorization: Basic ZW1haWxAZW1haWwuY29tOjEyMw=="
    
which, using `curl`, is equivalent to:

    curl "https://api.agendor.com.br/v1/organizations?page=1&pretty=true" \
        -u "email@email.com:password"
    
### Token
 
It's done by sending an `Authorization` header with the text `Token` followed by the use token.

Example:

    curl "https://api.agendor.com.br/v1/organizations?page=1&pretty=true" \
        -H "Authorization: Token dGVzdGVAYWdlbmRvci5jb20uYnI6YWdlbmRvcg"
    
**Getting the Token**

You can find your token making a GET request to `/auth/token` or by accesing [Menu > Integrações](https://www.agendor.com.br/sistema/integracoes/) in your Agendor account.

Example:

````
>> Request
curl https://api.agendor.com.br/v1/auth/token -u "email@email.com:password" -X GET

<< Response body
{"token":"b02719529-a249-m4e3-9111-0ss5q7i72153a"}
````

## Media Types
This API use JSON format to represent resources. When sending content on PUT/POST requests, you **must** specify the follow header:

    Content-Type: application/json

## Response Codes
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

You will often see:

* 200 (OK) - GET and PUT methods
* 201 (Created) - POST methods
* 204 (No content) - DELETE methods.

## Error States

When something goes wrong, the response status code can be `4xx` if the error is related to your request structure or `5xx` if it's our server's fault.

Example:

* 400 (Bad request) - GET /people?page=0, when page should start from 1
* 401 (Unauthorized) - GET /people/123, when you did not specify a valid authorization method or this resource belongs to your account but you don't have permission granted by the administrator for it
* 404 (Not found) - GET /people/999, when the id 999 does not exist
* 415 (Unsupported media type) - POST /people, when the Content-Type header is not defined
* 500 (Internal server error) - When a request throws an unexpected error. If you see this status code, please contact us: contato@agendor.com.br

## Pagination

When requesting a resource that returns a collection, a pagination process may be done.

The query parameters `page` *(default = 1)* and `per_page` *(default = 100)* are always sent on the request.

The response from the server will have the following headers:

* Total-Count: `integer`

    *Total number of objects found for the request done.*
    
* Link: `<uri for first page>; rel="first"`, `<uri for previous page>; rel="prev"`, `<uri for next page>; rel="next"`, `<uri for last page >; rel="last"`

    *Links for each page available based on the page requested.*

Example:
    
````
>> Request
curl https://api.agendor.com.br/v1/people?page=1&per_page=10

<< Response headers
Total-Count: 35
Link: <https://api.agendor.com.br/v1/people?page=2&per_page=10>; rel="next", 
    <https://api.agendor.com.br/v1/people?page=4&per_page=10>; rel="last"
````

# Group People

## People [/people/{id}]
A single `Person` object.

+ Parameters

    + id (string) ... `personId` attribute of the `Person`.

+ Model (application/json)

    + Body
    
            {
                "personId": 111,
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "category": {
                    "categoryId": 444,
                    "name": "Category name"
                },
                "organization": {
                    "organizationId": 555,
                    "nickname": "Organization nickname"
                },
                "phones": [
                    {
                        "number": "(00) 0000-0000",
                        "type": "work"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "mobile"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "fax"
                    }
                ],
                "emails": ["email@email.com"],
                "social": {
                    "facebook": "fb.com/user",
                    "twitter": "twitter.com/user",
                    "skype": "user",
                    "linkedIn": "linkedin.com/user"
                },
                "address": {
                    "postalCode": "12345000",
                    "country": "Country",
                    "state": "State",
                    "city": "City",
                    "district": "District",
                    "streetName": "Street",
                    "streetNumber": 111,
                    "additionalInfo": "Info"
                },
                "userOwner": {
                    "userId": 333,
                    "name": "User name"
                },
                "name": "Abc",
                "role": "Role",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "cpf": "11122233300"
            }

### Retrieve a Person [GET]

+ Parameters
    
    + id (string) ... `personId` attribute of the `Person`.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
        
+ Request
            
    + Header
    
            Accept: application/json

+ Response 200
    [People][]

+ Response 400

    When making a request with invalid options, status code 400 will be returned. For example, passing a invalid value for the `page` parameter.

    + Body
    
            {
                "statusCode": 400,
                "error": "Bad Request",
                "message": "the value of page must be larger than or equal to 1",
                "validation": {
                    "source": "query",
                    "keys": [
                        "page"
                    ]
                }
            }

+ Response 404
    
    When the resource with the specified id does not exist.
    
    + Body


### Edit a Person [PUT]
To update a `Person`, send a JSON with updated value for one or more of the `Person` attributes. All attributes values (states) from the previous version of this `Person` are carried over by default if not included in the hash. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    
    + id (string) ... `personId` attribute of the `Person`.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body

            {
                "name": "New person name"
            }

    + Schema

            {
                "personId": integer,
                "category": integer,
                "organization": integer,
                "phones": [
                    {
                        "number": "(##) ####-####",
                        "type": "work"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "mobile"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "fax"
                    }
                ],
                "emails": [string],
                "social": {
                    "facebook": string,
                    "twitter": string,
                    "skype": string,
                    "linkedIn": string
                },
                "address": {
                    "postalCode": "########",
                    "country": string,
                    "state": string,
                    "city": string,
                    "district": string,
                    "streetName": string,
                    "streetNumber": integer,
                    "additionalInfo": string
                },
                "userOwner": integer,
                "name": string,
                "role": string,
                "createTime": "yyyy-MM-ddThh:mm:ss.SSSZ",
                "ranking": integer (1-5),
                "cpf": "###########"
            }

+ Response 200
    
    [People][]

### Delete a Person [DELETE]
+ Response 204

    When succeed, return 204 and an empty payload.

    + Body

## People Collection [/people]
Collection of all `People`.

+ Model (application/json)

    JSON representation of People Resource.

    + Body

            [{
                "personId": 111,
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "category": {
                    "categoryId": 444,
                    "name": "Category name"
                },
                "organization": {
                    "organizationId": 555,
                    "nickname": "Organization nickname"
                },
                "phones": [
                    {
                        "number": "(00) 0000-0000",
                        "type": "work"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "mobile"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "fax"
                    }
                ],
                "emails": ["email@email.com"],
                "social": {
                    "facebook": "fb.com/user",
                    "twitter": "twitter.com/user",
                    "skype": "user",
                    "linkedIn": "linkedin.com/user"
                },
                "address": {
                    "postalCode": "12345000",
                    "country": "Country",
                    "state": "State",
                    "city": "City",
                    "district": "District",
                    "streetName": "Street",
                    "streetNumber": 111,
                    "additionalInfo": "Info"
                },
                "userOwner": {
                    "userId": 333,
                    "name": "User name"
                },
                "name": "Abc",
                "role": "Role",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "cpf": "11122233300"
            }]

### List All People [GET]
+ Parameters
    + page = `1` (optional, number) ... Page for pagination. Starts from 1.
    + per_page = `100` (optional, number) ... Quantity per page for pagination. Must be between 1 <= 100.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.

+ Response 200
    
    + Header
    
            Total-Count: 479 (total number of resources found by the request)
            Link: <https://api.agendor.com.br/v1/people?page=2&per_page=100>; rel="next", <https://api.agendor.com.br/v1/people?page=5&per_page=100>; rel="last"

    + Body
            
            [{
                "personId": 111,
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "category": {
                    "categoryId": 444,
                    "name": "Category name"
                },
                "organization": {
                    "organizationId": 555,
                    "nickname": "Organization nickname"
                },
                "phones": [
                    {
                        "number": "(00) 0000-0000",
                        "type": "work"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "mobile"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "fax"
                    }
                ],
                "emails": ["email@email.com"],
                "social": {
                    "facebook": "fb.com/user",
                    "twitter": "twitter.com/user",
                    "skype": "user",
                    "linkedIn": "linkedin.com/user"
                },
                "address": {
                    "postalCode": "12345000",
                    "country": "Country",
                    "state": "State",
                    "city": "City",
                    "district": "District",
                    "streetName": "Street",
                    "streetNumber": 111,
                    "additionalInfo": "Info"
                },
                "userOwner": {
                    "userId": 333,
                    "name": "User name"
                },
                "name": "Abc",
                "role": "Role",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "cpf": "11122233300"
            }]

### Add a new Person [POST]
To create a new `Person`, send a JSON with at least the person's `name`. All the other `Person` resource attributes are optionals. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body 
        
            {
                "name": "Name of the Person",
                "category": 123,
                "phones": [
                    {
                        "number": "(11) 99999-5555",
                        "type": "mobile"
                    }
                ]
            }

    + Schema
    
            {
                "personId": integer,
                "category": integer,
                "organization": integer,
                "phones": [
                    {
                        "number": "(##) ####-####",
                        "type": "work"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "mobile"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "fax"
                    }
                ],
                "emails": [string],
                "social": {
                    "facebook": string,
                    "twitter": string,
                    "skype": string,
                    "linkedIn": string
                },
                "address": {
                    "postalCode": "########",
                    "country": string,
                    "state": string,
                    "city": string,
                    "district": string,
                    "streetName": string,
                    "streetNumber": integer,
                    "additionalInfo": string
                },
                "userOwner": integer,
                "name": string,
                "role": string,
                "ranking": integer (1-5),
                "cpf": "###########"
            }

+ Response 201

    + Header
    
            Location: https://api.agendor.com.br/v1/people/111

    + Body
    
            {
                "personId": 111,
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "category": {
                    "categoryId": 444,
                    "name": "Category name"
                },
                "organization": {
                    "organizationId": 555,
                    "nickname": "Organization nickname"
                },
                "phones": [
                    {
                        "number": "(00) 0000-0000",
                        "type": "work"
                    },
                    {   
                        "number": "(00) 0000-0000",
                        "type": "mobile"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "fax"
                    }
                ],
                "emails": ["email@email.com"],
                "social": {
                    "facebook": "fb.com/user",
                    "twitter": "twitter.com/user",
                    "skype": "user",
                    "linkedIn": "linkedin.com/user"
                },
                "address": {
                    "postalCode": "12345000",
                    "country": "Country",
                    "state": "State",
                    "city": "City",
                    "district": "District",
                    "streetName": "Street",
                    "streetNumber": 111,
                    "additionalInfo": "Info"
                },
                "userOwner": {
                    "userId": 333,
                    "name": "User name"
                },
                "name": "Abc",
                "role": "Role",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "cpf": "11122233300"
            }
            
# Group Organizations

## Organizations [/organizations/{id}]
A single `Organization` object.

+ Parameters

    + id (string) ... `organizationId` attribute of the `Organization`.

+ Model (application/json)

    + Body
    
            {
                "organizationId": 111,
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "category": {
                    "categoryId": 444,
                    "name": "Category name"
                }
                "phones": [
                    {
                        "number": "(00) 0000-0000",
                        "type": "work"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "mobile"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "fax"
                    }
                ],
                "emails": ["email@email.com"],
                "social": {
                    "facebook": "fb.com/user",
                    "twitter": "twitter.com/user",
                    "skype": "user",
                    "linkedIn": "linkedin.com/user"
                },
                "address": {
                    "postalCode": "12345000",
                    "country": "Country",
                    "state": "State",
                    "city": "City",
                    "district": "District",
                    "streetName": "Street",
                    "streetNumber": 111,
                    "additionalInfo": "Info"
                },
                "userOwner": {
                    "userId": 333,
                    "name": "User name"
                },
                "nickname": "Abc",
                "legalName": "Abc Inc",
                "cnpj": "1112225555000",
                "description": "Description",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "website": "www.website.com.br"
            }

### Retrieve an Organization [GET]

+ Parameters
    
    + id (string) ... `organizationId` attribute of the `Organization`.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
        
+ Request
            
    + Header
    
            Accept: application/json

+ Response 200
    [Organizations][]

+ Response 400

    When making a request with invalid options, status code 400 will be returned. For example, passing a invalid value for the `page` parameter.

    + Body
    
            {
                "statusCode": 400,
                "error": "Bad Request",
                "message": "the value of page must be larger than or equal to 1",
                "validation": {
                    "source": "query",
                    "keys": [
                        "page"
                    ]
                }
            }

+ Response 404
    
    When the resource with the specified id does not exist.
    
    + Body


### Edit an Organization [PUT]
To update an `Organization`, send a JSON with updated value for one or more of the `Organization` attributes. All attributes values (states) from the previous version of this `Organization` are carried over by default if not included in the hash. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    
    + id (string) ... `organizationId` attribute of the `Organization`.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body

            {
                "name": "New organization name"
            }

    + Schema

            {
                "organizationId": integer,
                "category": integer,
                "sector": integer,
                "phones": [
                    {
                        "number": "(##) ####-####",
                        "type": "work"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "mobile"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "fax"
                    }
                ],
                "emails": [string],
                "social": {
                    "facebook": string,
                    "twitter": string,
                    "skype": string,
                    "linkedIn": string
                },
                "address": {
                    "postalCode": "########",
                    "country": string,
                    "state": string,
                    "city": string,
                    "district": string,
                    "streetName": string,
                    "streetNumber": integer,
                    "additionalInfo": string
                },
                "userOwner": integer,
                "nickname": string,
                "legalName": "Abc Inc",
                "cnpj": "##############",
                "description": string,
                "website": string,
                "createTime": "yyyy-MM-ddThh:mm:ss.SSSZ",
                "ranking": integer (1-5)
            }

+ Response 200
    
    [Organizations][]

### Delete an Organization [DELETE]
+ Response 204

    When succeed, return 204 and an empty payload.

    + Body

## Organizations Collection [/organizations]
Collection of all `Organizations`.

+ Model (application/json)

    JSON representation of Organizations Resource.

    + Body

            [{
                 "organizationId": 111,
                 "user": {
                     "userId": 333,
                     "name": "User name"
                 },
                 "category": {
                     "categoryId": 444,
                     "name": "Category name"
                 },
                 "phones": [
                     {
                         "number": "(00) 0000-0000",
                         "type": "work"
                     },
                     {
                         "number": "(00) 0000-0000",
                         "type": "mobile"
                     },
                     {
                         "number": "(00) 0000-0000",
                         "type": "fax"
                     }
                 ],
                 "emails": ["email@email.com"],
                 "social": {
                     "facebook": "fb.com/user",
                     "twitter": "twitter.com/user",
                     "skype": "user",
                     "linkedIn": "linkedin.com/user"
                 },
                 "address": {
                     "postalCode": "12345000",
                     "country": "Country",
                     "state": "State",
                     "city": "City",
                     "district": "District",
                     "streetName": "Street",
                     "streetNumber": 111,
                     "additionalInfo": "Info"
                 },
                 "userOwner": {
                     "userId": 333,
                     "name": "User name"
                 },
                 "nickname": "Abc",
                 "legalName": "Abc Inc",
                 "cnpj": "1112225555000",
                 "description": "Description",
                 "createTime": "2014-03-27T14:59:39.000Z",
                 "ranking": 5,
                 "website": "www.website.com.br"
             }]

### List all Organizations [GET]
+ Parameters
    + page = `1` (optional, number) ... Page for pagination. Starts from 1.
    + per_page = `100` (optional, number) ... Quantity per page for pagination. Must be between 1 <= 100.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.

+ Response 200
    
    + Header
    
            Total-Count: 479 (total number of resources found by the request)
            Link: <https://api.agendor.com.br/v1/organizations?page=2&per_page=100>; rel="next", <https://api.agendor.com.br/v1/organizations?page=5&per_page=100>; rel="last"

    + Body
            
            [{
                  "organizationId": 111,
                  "user": {
                      "userId": 333,
                      "name": "User name"
                  },
                  "category": {
                      "categoryId": 444,
                      "name": "Category name"
                  },
                  "phones": [
                      {
                          "number": "(00) 0000-0000",
                          "type": "work"
                      },
                      {
                          "number": "(00) 0000-0000",
                          "type": "mobile"
                      },
                      {
                          "number": "(00) 0000-0000",
                          "type": "fax"
                      }
                  ],
                  "emails": ["email@email.com"],
                  "social": {
                      "facebook": "fb.com/user",
                      "twitter": "twitter.com/user",
                      "skype": "user",
                      "linkedIn": "linkedin.com/user"
                  },
                  "address": {
                      "postalCode": "12345000",
                      "country": "Country",
                      "state": "State",
                      "city": "City",
                      "district": "District",
                      "streetName": "Street",
                      "streetNumber": 111,
                      "additionalInfo": "Info"
                  },
                  "userOwner": {
                      "userId": 333,
                      "name": "User name"
                  },
                  "nickname": "Abc",
                  "legalName": "Abc Inc",
                  "cnpj": "1112225555000",
                  "description": "Description",
                  "createTime": "2014-03-27T14:59:39.000Z",
                  "ranking": 5,
                  "website": "www.website.com.br"
              }]

### Add a new Organization [POST]
To create a new `Organization`, send a JSON with at least the organization's `nickname`. All the other `Organization` resource attributes are optionals. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body 
        
            {
                "nickname": "Name of the Organization",
                "category": 123,
                "phones": [
                    {
                        "number": "(11) 99999-5555",
                        "type": "mobile"
                    }
                ]
            }

    + Schema
    
            {
                "organizationId": integer,
                "category": integer,
                "sector": integer,
                "phones": [
                    {
                        "number": "(##) ####-####",
                        "type": "work"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "mobile"
                    },
                    {
                        "number": "(##) ####-####",
                        "type": "fax"
                    }
                ],
                "emails": [string],
                "social": {
                    "facebook": string,
                    "twitter": string,
                    "skype": string,
                    "linkedIn": string
                },
                "address": {
                    "postalCode": "########",
                    "country": string,
                    "state": string,
                    "city": string,
                    "district": string,
                    "streetName": string,
                    "streetNumber": integer,
                    "additionalInfo": string
                },
                "userOwner": integer,
                "nickname": string,
                "legalName": "Abc Inc",
                "cnpj": "##############",
                "description": string,
                "website": string,
                "createTime": "yyyy-MM-ddThh:mm:ss.SSSZ",
                "ranking": integer (1-5)
            }

+ Response 201

    + Header
    
            Location: https://api.agendor.com.br/v1/organizations/111

    + Body
    
            {
                "organizationId": 111,
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "category": {
                    "categoryId": 444,
                    "name": "Category name"
                },
                "sector": {
                    "sectorId": 555,
                    "name": "Sector name"
                },
                "phones": [
                    {
                        "number": "(00) 0000-0000",
                        "type": "work"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "mobile"
                    },
                    {
                        "number": "(00) 0000-0000",
                        "type": "fax"
                    }
                ],
                "emails": ["email@email.com"],
                "social": {
                    "facebook": "fb.com/user",
                    "twitter": "twitter.com/user",
                    "skype": "user",
                    "linkedIn": "linkedin.com/user"
                },
                "address": {
                    "postalCode": "12345000",
                    "country": "Country",
                    "state": "State",
                    "city": "City",
                    "district": "District",
                    "streetName": "Street",
                    "streetNumber": 111,
                    "additionalInfo": "Info"
                },
                "userOwner": {
                    "userId": 333,
                    "name": "User name"
                },
                "nickname": "Abc",
                "legalName": "Abc Inc",
                "cnpj": "1112225555000",
                "description": "Description",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "website": "www.website.com.br"
            }

# Group Deals

## Deals [/deals/{id}]
A single `Deal` object.

+ Parameters

    + id (string) ... `dealId` attribute of the `Deal`.

+ Model (application/json)

    + Body
    
            {
                "dealId": 111,
                "organization": {
                    "organizationId": 333,
                    "name": "Organization name"
                },
                "person": {
                    "personId": 333,
                    "name": "Person name"
                },
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "dealStage": {
                    "dealStageId": 444,
                    "name": "Deal Stage name"
                },
                "dealStatus": {
                    "dealStatusId": 1, (1-3)
                    "name": "In process" (In process, Won, Lost)
                },
                "userOwner": {
                    "userId": 555,
                    "name": "User Owner name"
                },
                "title": "Abc",
                "description": "Description",
                "startTime": "2014-03-27T14:59:39.000Z",
                "endTime": "2014-03-27T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "value": 123999.00,
                "products": [
                    {
                        "productId": 77,
                        "name": "Product X"
                    },
                    {
                        "productId": 99,
                        "name": "Product Y"
                    }
                ],
                "allowedUsers": [
                    {
                        "userId": 333,
                        "name": "User name 1"
                    },
                    {
                        "userId": 555,
                        "name": "User name 2"
                    }
                ]
            }


### Edit a Deal [PUT]
To update an `Deal`, send a JSON with updated value for one or more of the `Deal` attributes. All attributes values (states) from the previous version of this `Deal` are carried over by default if not included in the hash. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    
    + id (string) ... `dealId` attribute of the `Deal`.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body

            {
                "value": 10000
            }

    + Schema

            {
                "organization": 111, // can not be set together with person
                "person": 222, // can not be set together with organization
                "user": 333,
                "dealStage": 1, // deal stage order (1-10)
                "dealStatus": 1, // deal status id (1-3)
                "userOwner": 444,
                "title": "Abc",
                "description": "Description",
                "startTime": "2014-03-28T14:59:39.000Z",
                "endTime": "2014-04-10T00:00:00.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "value": 123999.00,
                "products": [77, 99],
                "allowedUsers": [333, 555]
            }

+ Response 200
    
    [Deals][]


## Deals Collection [/deals]
Collection of all `Deals`.

+ Model (application/json)

    JSON representation of Deal Resource.

    + Body

            [{
                "dealId": 111,
                "organization": {
                    "organizationId": 333,
                    "name": "Organization name"
                },
                "person": {
                    "personId": 333,
                    "name": "Person name"
                },
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "dealStage": {
                    "dealStageId": 444,
                    "name": "Deal Stage name"
                },
                "dealStatus": {
                    "dealStatusId": 1, (1-3)
                    "name": "In process" (In process, Won, Lost)
                },
                "userOwner": {
                    "userId": 555,
                    "name": "User Owner name"
                },
                "title": "Abc",
                "description": "Description",
                "startTime": "2014-03-27T14:59:39.000Z",
                "endTime": "2014-03-27T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "value": 123999.00,
                "products": [
                    {
                        "productId": 77,
                        "name": "Product X"
                    },
                    {
                        "productId": 99,
                        "name": "Product Y"
                    }
                ],
                "allowedUsers": [
                    {
                        "userId": 333,
                        "name": "User name 1"
                    },
                    {
                        "userId": 555,
                        "name": "User name 2"
                    }
                ]
            }]

### Add a new Deal [POST]
To create a new `Deal`, send a JSON with at least the deal's `title`. All the other `Deal` resource attributes are optionals. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body 
        
            {
                "title": "Deal Title",
                "organization": <A valid Organization ID>,
                "value": 20000,
                "dealStageOrder": 1
            }

    + Schema
    
            {
                "organization": 111, // can not be set together with person
                "person": 222, // can not be set together with organization
                "user": 333,
                "dealStage": 1, // deal stage order (1-10)
                "dealStatus": 1, // deal status id (1-3)
                "userOwner": 444,
                "title": "Abc",
                "description": "Description",
                "startTime": "2014-03-28T14:59:39.000Z",
                "endTime": "2014-04-10T00:00:00.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "value": 123999.00,
                "products": [77, 99],
                "allowedUsers": [333, 555]
            }

+ Response 201

    + Header
    
            Location: https://api.agendor.com.br/v1/deals/111

    + Body
    
            {
                "dealId": 111,
                "organization": {
                    "organizationId": 333,
                    "name": "Organization name"
                },
                "person": {
                    "personId": 333,
                    "name": "Person name"
                },
                "user": {
                    "userId": 333,
                    "name": "User name"
                },
                "dealStage": {
                    "dealStageId": 444,
                    "name": "Deal Stage name"
                },
                "dealStatus": {
                    "dealStatusId": 1, (1-3)
                    "name": "In process" (In process, Won, Lost)
                },
                "userOwner": {
                    "userId": 555,
                    "name": "User Owner name"
                },
                "title": "Abc",
                "description": "Description",
                "startTime": "2014-03-27T14:59:39.000Z",
                "endTime": "2014-03-27T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "ranking": 5,
                "value": 123999.00,
                "products": [
                    {
                        "productId": 77,
                        "name": "Product X"
                    },
                    {
                        "productId": 99,
                        "name": "Product Y"
                    }
                ],
                "allowedUsers": [
                    {
                        "userId": 333,
                        "name": "User name 1"
                    },
                    {
                        "userId": 555,
                        "name": "User name 2"
                    }
                ]
            }

# Group Tasks

## Tasks [/tasks/{id}]
A single `Task` object.

+ Parameters

    + id (string) ... `taskId` attribute of the `Task`.

+ Model (application/json)

    + Body
    
            {
                "taskId": 999,
                "deal": {
                    "dealId": 111,
                    "name": "Deal title"
                },
                "user": {
                    "userId": 222,
                    "name": "User name"
                },
                "text": "Text",
                "dueDate": "2014-03-28T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "done": false
                "doneTime": null,
                "doneUser": null,
                "assignedUsers": [
                    {
                        "userId": 55,
                        "name": "User name"
                    },
                    {
                        "userId": 66,
                        "name": "User name"
                    }
                ]
                "metrics": null
            }


### Edit a Task [PUT]
To update an `Task`, send a JSON with updated value for one or more of the `Task` attributes. All attributes values (states) from the previous version of this `Task` are carried over by default if not included in the hash. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    
    + id (string) ... `taskId` attribute of the `Task`.
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body

            {
                "deal": 111,
                "text": "Text",
                "dueDate": "2014-03-28T14:59:39.000Z",
                "assignedUsers": [55, 66]
            }

    + Schema

            {
                "deal": 111, // can not be set together with person or organization
                "person": 222, // can not be set together with deal or organization
                "organization": 333, // can not be set together with deal or person
                "user": 333, // if not set will be the request user
                "text": "Text",
                "dueDate": "2014-03-28T14:59:39.000Z", // can not be in the past
                "createTime": "2014-03-27T14:59:39.000Z", // if not set will be current time in server
                "done": false,
                "doneTime": "2014-03-28T14:59:39.000Z",
                "doneUser": 333,
                "assignedUsers": [55, 66],
                "metrics": [
                    {
                        "metricId": 55
                        "value": 1
                    },
                    {
                        "metricId": 77
                        "value": 20.10
                    },
                ]
            }

+ Response 200
    
    [Tasks][]


## Tasks Collection [/tasks]
Collection of all `Tasks`.

+ Model (application/json)

    JSON representation of Task Resource.

    + Body

            [{
                "taskId": 999,
                "deal": {
                    "dealId": 333,
                    "name": "Deal title"
                },
                "organization": {
                    "organizationId": 444,
                    "name": "Organization name"
                },
                "person": {
                    "personId": 555,
                    "name": "Person name"
                },
                "user": {
                    "userId": 666,
                    "name": "User name"
                },
                "text": "text",
                "dueDate": "2014-03-28T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "done": false
                "doneTime": "2014-03-27T14:59:39.000Z",
                "doneUser": {
                    "userId": 666,
                    "name": "User name"
                },
                "assignedUsers": [
                    {
                        "userId": 666,
                        "name": "User name"
                    },
                    {
                        "userId": 666,
                        "name": "User name"
                    }
                ]
                "metrics": [
                    {
                        "metricId": 55
                        "value": 1
                    },
                    {
                        "metricId": 77
                        "value": 20.10
                    }
                ]
            }]

### Add a new Task [POST]
To create a new `Task`, send a JSON with at least the task's `text`, `dueDate`, `assignedUsers` and one of `deal`, `person` or `organization`. All the other `Task` resource attributes are optionals. See the **Schema** in the Example section for all allowed attributes.

+ Parameters
    + pretty = `false` (optional, boolean) ... Format JSON response to a friendly readable format.
    
+ Request (application/json)

    + Body 
        
            {
                "deal": 111,
                "text": "Text",
                "dueDate": "2014-03-28T14:59:39.000Z",
                "assignedUsers": [55, 66]
            }

    + Schema
    
            {
                "deal": 111,
                "person": 222,
                "organization": 333,
                "user": 333,
                "text": "Text",
                "dueDate": "2014-03-28T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "done": false,
                "doneTime": "2014-03-28T14:59:39.000Z",
                "doneUser": 333,
                "assignedUsers": [55, 66],
                "metrics": [
                    {
                        "metricId": 55
                        "value": 1
                    },
                    {
                        "metricId": 77
                        "value": 20.10
                    },
                ]
            }

+ Response 201

    + Header
    
            Location: https://api.agendor.com.br/v1/deals/111

    + Body
    
            {
                "taskId": 999,
                "deal": {
                    "dealId": 111,
                    "name": "Deal title"
                },
                "user": {
                    "userId": 222,
                    "name": "User name"
                },
                "text": "text",
                "dueDate": "2014-03-28T14:59:39.000Z",
                "createTime": "2014-03-27T14:59:39.000Z",
                "done": false
                "doneTime": null,
                "doneUser": null,
                "assignedUsers": [
                    {
                        "userId": 55,
                        "name": "User name"
                    },
                    {
                        "userId": 66,
                        "name": "User name"
                    }
                ]
                "metrics": null
            }
